{"ast":null,"code":"var _jsxFileName = \"/Users/crushedsummers/Desktop/Work/DadResume/chefYannick/src/pages/Health.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport React, { useState } from 'react';\nimport '../App.css';\nimport { HealthFluff, HealthListV2, Recipes } from '../TextInfo';\nimport HealthBlock from '../components/HealthBlock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Health = () => {\n  _s();\n\n  const [active, setActive] = useState([100, 100]);\n\n  const dropdown = (index1, index2) => {\n    if (active[0] !== index1 && active[1] !== index2) {\n      if (4 !== index1 && 1 !== index2 && 1 !== index1 && 2 !== index2) {\n        let value = [index1, index2];\n        setActive(value);\n      }\n    } else setActive([100, 100]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container_pages\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filler-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title_exp\",\n          children: \"You are what you eat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"healthDesc\",\n          children: HealthFluff\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"hth_li supplier\",\n          children: HealthListV2.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"healthCard\",\n              children: /*#__PURE__*/_jsxDEV(HealthBlock, {\n                itemi: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filler-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title_exp\",\n          children: \"A weekly menu of tasty and healthy diet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"[with Recipes]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"healthDesc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipeGrid\",\n        children: Recipes.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"recipeDay\",\n              children: item.day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this), item.dishes.map((itemv2, indexv2) => {\n              let classes = \"\";\n              indexv2 == active ? classes = \"recipeBlock recipeActive\" : classes = \"recipeBlock\";\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                className: classes,\n                onClick: () => dropdown(index, indexv2),\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"annotateP\",\n                  children: itemv2.type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"recipeDish\",\n                  children: itemv2.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 54,\n                  columnNumber: 45\n                }, this)]\n              }, indexv2, true, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 41\n              }, this);\n            })]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), active[0] !== 100 && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"recipeDish\",\n          children: Recipes[active[0]][active[1]].name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Health, \"qfEIT/ovLn25Y0y+DAsOAAifGSM=\");\n\n_c = Health;\nexport default Health;\n\nvar _c;\n\n$RefreshReg$(_c, \"Health\");","map":{"version":3,"sources":["/Users/crushedsummers/Desktop/Work/DadResume/chefYannick/src/pages/Health.js"],"names":["React","useState","HealthFluff","HealthListV2","Recipes","HealthBlock","Health","active","setActive","dropdown","index1","index2","value","map","item","index","day","dishes","itemv2","indexv2","classes","type","name"],"mappings":"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","sourcesContent":["/** @format */\n\nimport React, { useState } from 'react';\nimport '../App.css';\nimport { HealthFluff, HealthListV2, Recipes } from '../TextInfo';\nimport HealthBlock from '../components/HealthBlock';\n\nconst Health = () => {\n    const [active, setActive] = useState( [100, 100] );\n    const dropdown = ( index1, index2 ) => {\n        if ( active[0] !== index1 && active[1] !== index2 ) {\n            if ( 4 !== index1 && 1 !== index2 && 1 !== index1 && 2 !== index2 ) {\n                let value = [index1, index2];\n                setActive( value );\n            }\n        }\n        else\n            setActive( [100, 100] );\n    };\n    return (\n        <div className='container_pages'>\n            <span>\n                <div className='filler-text'>\n                    <h1 className='title_exp'>You are what you eat</h1>\n                    <p className='healthDesc'>{HealthFluff}</p>\n                </div>\n                <div>\n                    <span className='hth_li supplier'>\n                        {HealthListV2.map( ( item, index ) => {\n                            return (\n                                <span key={index} className=\"healthCard\">\n                                    <HealthBlock itemi={item} />\n                                </span>\n                            );\n                        } )}\n                    </span>\n                </div>\n                <div className='filler-text'>\n                    <h1 className='title_exp'>A weekly menu of tasty and healthy diet</h1>\n                    <h1>[with Recipes]</h1>\n                    <p className='healthDesc'></p>\n                </div>\n                <div className=\"recipeGrid\">\n                    {Recipes.map( ( item, index ) => {\n                        return (\n                            <span key={index}>\n                                <p className='recipeDay'>{item.day}</p>\n                                {item.dishes.map( ( itemv2, indexv2 ) => {\n                                    let classes = \"\";\n                                    ( indexv2 == active ? classes = \"recipeBlock recipeActive\" : classes = \"recipeBlock\" )\n                                    return (\n                                        <span key={indexv2} className={classes} onClick={() => dropdown( index, indexv2 )}>\n                                            <p className=\"annotateP\">{itemv2.type}</p>\n                                            <p className=\"recipeDish\">{itemv2.name}</p>\n                                        </span>\n                                    );\n                                } )}\n                            </span>\n                        );\n                    } )}\n                </div>\n                {active[0] !== 100 &&\n                    <span>\n                        <h3 className=\"recipeDish\">{Recipes[active[0]][active[1]].name}</h3>\n                        {/* <div className=\"recipeDisplay\">\n                            <span>\n                                <h2><b>Ingredients</b></h2>\n                                <ul className=\"work_li\">\n                                    {Recipes[active[0]][active[1]].ingred.map( ( item, index ) => {\n                                        if ( item.ach ) {\n                                            return (\n                                                <li key={index}>{item.name}\n                                                    <ul className=\"work_li\">\n                                                        {item.ach.map( ( itemv2, indexv2 ) => {\n                                                            return < li key={indexv2} > {itemv2}</li>\n                                                        } )}\n                                                    </ul>\n                                                </li>\n                                            );\n                                        }\n                                        else {\n                                            return (\n                                                <li key={index}>{item.name}</li>\n                                            );\n                                        }\n                                    } )}\n                                </ul>\n                            </span>\n                            <span>\n                                <h2><b>Method</b></h2>\n                                <ol className=\"work_li\">\n                                    {Recipes[active[0]][active[1]].method.map( ( item, index ) => {\n                                        return (\n                                            <li key={index}>{item.name}</li>\n                                        );\n                                    } )}\n                                </ol>\n                            </span>\n\n                        </div> */}\n                    </span>\n                }\n\n            </span >\n        </div >\n    );\n};\n\nexport default Health;"]},"metadata":{},"sourceType":"module"}