{"ast":null,"code":"var _jsxFileName = \"/Users/crushedsummers/Desktop/Work/DadResume/chefYannick/src/components/HealthRecipe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Recipes } from '../TextInfo';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HealthRecipe = () => {\n  _s();\n\n  const [active, setActive] = useState([100, 100]);\n\n  const dropdown = (index1, index2) => {\n    if (active[0] !== index1 && active[1] !== index2) {\n      let value = [index1, index2];\n      if (value[0] == 4 && value[1] == 1) setActive([100, 100]);else if (value[0] == 1 && value[1] == 2) setActive([100, 100]);else setActive(value);\n    } else setActive([100, 100]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filler-text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title_exp\",\n        children: \"A Weekly Menu of Tasty and Healthy Diet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"[with recipes]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"healthDesc\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipeGrid\",\n      children: Recipes.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"recipeDayBlock\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"recipeDay\",\n            children: item.day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this), item.dishes.map((itemv2, indexv2) => {\n            let classes = \"\";\n            index == active[0] && indexv2 == active[1] ? classes = \"recipeBlock recipeActive\" : classes = \"recipeBlock\";\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              className: classes,\n              onClick: () => dropdown(index, indexv2),\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"annotateP\",\n                children: itemv2.type\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"recipeDish\",\n                children: itemv2.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 41\n              }, this)]\n            }, indexv2, true, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 37\n            }, this);\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), active[0] !== 100 && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"recipeDish\",\n        children: Recipes[active[0]].dishes[active[1]].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipeDisplay\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Ingredients\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"work_li\",\n            children: Recipes[active[0]].dishes[active[1]].ingred.map((item, index) => {\n              if (item.ach) {\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [item.name, /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"work_li\",\n                    children: item.ach.map((itemv2, indexv2) => {\n                      return /*#__PURE__*/_jsxDEV(\"li\", {\n                        children: [\" \", itemv2]\n                      }, indexv2, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 59,\n                        columnNumber: 64\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 49\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 45\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: item.name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 45\n                }, this);\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Method\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            className: \"work_li\",\n            children: Recipes[active[0]].dishes[active[1]].method.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: item.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HealthRecipe, \"qfEIT/ovLn25Y0y+DAsOAAifGSM=\");\n\n_c = HealthRecipe;\nexport default HealthRecipe;\n\nvar _c;\n\n$RefreshReg$(_c, \"HealthRecipe\");","map":{"version":3,"sources":["/Users/crushedsummers/Desktop/Work/DadResume/chefYannick/src/components/HealthRecipe.js"],"names":["React","useState","Recipes","HealthRecipe","active","setActive","dropdown","index1","index2","value","map","item","index","day","dishes","itemv2","indexv2","classes","type","name","ingred","ach","method"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Recipes } from '../TextInfo';\nimport '../App.css';\n\nconst HealthRecipe = () => {\n    const [active, setActive] = useState( [100, 100] );\n    const dropdown = ( index1, index2 ) => {\n        if ( active[0] !== index1 && active[1] !== index2 ) {\n            let value = [index1, index2];\n            if ( ( value[0] == 4 && value[1] == 1 ) )\n                setActive( [100, 100] );\n            else if ( ( value[0] == 1 && value[1] == 2 ) )\n                setActive( [100, 100] );\n            else\n                setActive( value );\n        }\n        else\n            setActive( [100, 100] );\n    };\n    return (\n        <div>\n            <div className='filler-text'>\n                <h1 className='title_exp'>A Weekly Menu of Tasty and Healthy Diet</h1>\n                <h1><i>[with recipes]</i></h1>\n                <p className='healthDesc'></p>\n            </div>\n            <div className=\"recipeGrid\">\n                {Recipes.map( ( item, index ) => {\n                    return (\n                        <span key={index} className=\"recipeDayBlock\">\n                            <p className='recipeDay'>{item.day}</p>\n                            {item.dishes.map( ( itemv2, indexv2 ) => {\n                                let classes = \"\";\n                                ( index == active[0] && indexv2 == active[1] ? classes = \"recipeBlock recipeActive\" : classes = \"recipeBlock\" )\n                                return (\n                                    <span key={indexv2} className={classes} onClick={() => dropdown( index, indexv2 )}>\n                                        <p className=\"annotateP\">{itemv2.type}</p>\n                                        <p className=\"recipeDish\">{itemv2.name}</p>\n                                    </span>\n                                );\n                            } )}\n                        </span>\n                    );\n                } )}\n            </div>\n            {active[0] !== 100 &&\n                <span>\n                    <h3 className=\"recipeDish\">{Recipes[active[0]].dishes[active[1]].name}</h3>\n                    <div className=\"recipeDisplay\">\n                        <span>\n                            <h2><b>Ingredients</b></h2>\n                            <ul className=\"work_li\">\n                                {Recipes[active[0]].dishes[active[1]].ingred.map( ( item, index ) => {\n                                    if ( item.ach ) {\n                                        return (\n                                            <li key={index}>{item.name}\n                                                <ul className=\"work_li\">\n                                                    {item.ach.map( ( itemv2, indexv2 ) => {\n                                                        return < li key={indexv2} > {itemv2}</li>\n                                                    } )}\n                                                </ul>\n                                            </li>\n                                        );\n                                    }\n                                    else {\n                                        return (\n                                            <li key={index}>{item.name}</li>\n                                        );\n                                    }\n                                } )}\n                            </ul>\n                        </span>\n                        <span>\n                            <h2><b>Method</b></h2>\n                            <ol className=\"work_li\">\n                                {Recipes[active[0]].dishes[active[1]].method.map( ( item, index ) => {\n                                    return (\n                                        <li key={index}>{item.name}</li>\n                                    );\n                                } )}\n                            </ol>\n                        </span>\n\n                    </div>\n                </span>\n            }\n        </div>\n    )\n}\n\nexport default HealthRecipe"]},"metadata":{},"sourceType":"module"}